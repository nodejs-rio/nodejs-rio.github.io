{"version":3,"sources":["webpack:///./src/gatsby-theme-sky-lite/templates/tag.js"],"names":["Posts","posts","pathPrefix","container","spacing","map","node","excerpt","fileAbsolutePath","frontmatter","id","title","featuredImage","postDate","path","basename","split","splice","join","item","xs","sm","key","url","TagTemplate","data","site","siteMetadata","templates","pathPrefixTag","filters","tag","allMdx","edges","pageContext","flexGrow","width","maxWidth","marginX","padding","textAlign","marginBottom","color","variant","style","fontWeight","fontFamily","textDecoration","length","display","justifyContent","marginTop","component","Link","to","pageQuery"],"mappings":"4UAOMA,EAAQ,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WACtB,OACE,kBAAC,IAAD,CAAMC,WAAS,EAACC,QAAS,GACtBH,EAAMI,KACL,YAMO,IAAD,IALJC,KACEC,EAIE,EAJFA,QACAC,EAGE,EAHFA,iBAGE,IAFFC,YAAeC,EAEb,EAFaA,GAAIC,EAEjB,EAFiBA,MAAOC,EAExB,EAFwBA,cAGtBC,EAAWC,IACdC,SAASP,GACTQ,MAAM,KACNC,OAAO,EAAG,GACVC,KAAK,KACR,OACE,kBAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,IAAKZ,GAC7B,kBAAC,IAAD,CACEE,cAAeA,EACfD,MAAOA,EACPY,IAAG,IAAMrB,EAAN,IAAoBQ,EACvBG,SAAUA,EACVN,QAASA,UAUV,SAASiB,EAAT,GAiBX,IAAD,IAhBDC,KAgBC,IAfCC,KACEC,aACEC,UACE3B,MACEC,EAWT,EAXSA,WAEqB2B,EAS9B,EAVSC,QACEC,IAAO7B,WAMAD,EAGlB,EAHC+B,OAAUC,MAEGF,EACd,EADDG,YAAeH,IAEf,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKI,SAAU,EAAGC,MAAM,OAAOC,SAAU,IAAKC,QAAQ,QACpD,kBAAC,IAAD,CAAKC,QAAS,GACZ,kBAAC,IAAD,CAAKC,UAAU,SAASD,QAAS,GAC/B,kBAAC,IAAD,CAAKE,aAAc,GACjB,kBAAC,IAAD,CACEC,MAAM,UACNC,QAAQ,KACRC,MAAO,CACLC,WAAY,OACZC,WACE,mEACFL,aAAc,EACdM,eAAgB,SARpB,IAWIhB,IAGN,kBAAC,IAAD,CAASY,QAAQ,YAEnB,kBAAC3C,EAAD,CAAOC,MAAOA,EAAOC,WAAYA,IAChCD,EAAM+C,OAAS,GACd,kBAAC,IAAD,CACEC,QAAQ,OACRC,eAAe,WACfX,QAAS,EACTY,UAAW,GAEX,kBAAC,IAAD,CACER,QAAQ,YACRD,MAAM,YACNU,UAAWC,OACXC,GAAE,IAAMzB,EAAN,IAAuBE,EAAvB,WAJJ,gBAgBP,IAAMwB,EAAS","file":"component---src-gatsby-theme-sky-lite-templates-tag-js-9a2923bd9234acf00e0b.js","sourcesContent":["import React from \"react\";\nimport path from \"path\";\nimport { Link, graphql } from \"gatsby\";\nimport Layout from \"../components/Layout\";\nimport Card from \"../components/Card\";\nimport { Box, Button, Divider, Grid, Typography } from \"@material-ui/core\";\n\nconst Posts = ({ posts, pathPrefix }) => {\n  return (\n    <Grid container spacing={3}>\n      {posts.map(\n        ({\n          node: {\n            excerpt,\n            fileAbsolutePath,\n            frontmatter: { id, title, featuredImage }\n          }\n        }) => {\n          const postDate = path\n            .basename(fileAbsolutePath)\n            .split(\"-\")\n            .splice(0, 3)\n            .join(\"-\");\n          return (\n            <Grid item xs={12} sm={4} key={id}>\n              <Card\n                featuredImage={featuredImage}\n                title={title}\n                url={`/${pathPrefix}/${id}`}\n                postDate={postDate}\n                excerpt={excerpt}\n              />\n            </Grid>\n          );\n        }\n      )}\n    </Grid>\n  );\n};\n\nexport default function TagTemplate({\n  data: {\n    site: {\n      siteMetadata: {\n        templates: {\n          posts: {\n            pathPrefix,\n            filters: {\n              tag: { pathPrefix: pathPrefixTag }\n            }\n          }\n        }\n      }\n    },\n    allMdx: { edges: posts }\n  },\n  pageContext: { tag }\n}) {\n  return (\n    <Layout>\n      <Box flexGrow={1} width=\"100%\" maxWidth={960} marginX=\"auto\">\n        <Box padding={2}>\n          <Box textAlign=\"center\" padding={4}>\n            <Box marginBottom={4}>\n              <Typography\n                color=\"primary\"\n                variant=\"h3\"\n                style={{\n                  fontWeight: \"bold\",\n                  fontFamily:\n                    \"Work Sans, -apple-system, BlinkMacSystemFont, Roboto, sans-serif\",\n                  marginBottom: 4,\n                  textDecoration: \"none\"\n                }}\n              >\n                #{tag}\n              </Typography>\n            </Box>\n            <Divider variant=\"middle\" />\n          </Box>\n          <Posts posts={posts} pathPrefix={pathPrefix} />\n          {posts.length > 1 && (\n            <Box\n              display=\"flex\"\n              justifyContent=\"flex-end\"\n              padding={1}\n              marginTop={1}\n            >\n              <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                component={Link}\n                to={`/${pathPrefixTag}/${tag}/page/1`}\n              >\n                View All\n              </Button>\n            </Box>\n          )}\n        </Box>\n      </Box>\n    </Layout>\n  );\n}\n\nexport const pageQuery = graphql`\n  query($tag: String!, $limit: Int!) {\n    site {\n      siteMetadata {\n        templates {\n          posts {\n            pathPrefix\n            filters {\n              tag {\n                pathPrefix\n              }\n            }\n          }\n        }\n      }\n    }\n    allMdx(\n      filter: {\n        fileAbsolutePath: { regex: \"/content/posts/\" }\n        frontmatter: { tags: { in: [$tag] } }\n      }\n      sort: { order: DESC, fields: [fileAbsolutePath] }\n      limit: $limit\n    ) {\n      edges {\n        node {\n          excerpt(pruneLength: 250)\n          fileAbsolutePath\n          frontmatter {\n            id\n            title\n            featuredImage {\n              childImageSharp {\n                fluid(maxWidth: 720) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}